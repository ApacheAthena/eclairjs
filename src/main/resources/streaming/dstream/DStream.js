/*
 * Copyright 2015 IBM Corp.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * @constructor
 * @classdec Represents a Discretized Stream (DStream), the basic abstraction in Spark Streaming, 
 * is a continuous sequence of RDDs (of the same type) representing a continuous stream of data.
 * @param {object} jDStream 
  */
var DStream = function(jDStream, streamingContext) {
	var jvmObj = jDStream;
	this.streamingContext = streamingContext;
	this.logger = Logger.getLogger("streaming.dtream.DStream_js");
	JavaWrapper.call(this, jvmObj);
};

DStream.prototype = Object.create(JavaWrapper.prototype); 

DStream.prototype.constructor = DStream;

/**
 * Return a new DStream in which each RDD contains the counts of each distinct
 * value in each RDD of this DStream. Hash partitioning is used to generate the
 * RDDs with Spark's default number of partitions if numPartions is not
 * specified.
 * @param {int} numPartitions
 * @returns {DStream}
 */
DStream.prototype.countByValue = function() {
    if(arguments.length > 0) {
        return new DStream(this.getJavaObject().countByValue(arguments[0]),
                           this.stremaingContext);
    } else {
        return new DStream(this.getJavaObject().countByValue(),
                           this.streamingContext);
    }
};

/**
 * Return a new DStream in which each RDD has a single element generated by
 * counting the number of elements in a window over this DStream. windowDuration
 * and slideDuration are as defined in the window() operation. This is
 * equivalent to window(windowDuration, slideDuration).count()
 * @param {Duration} windowDuration
 * @param {Duration} slideDuration
 * @returns {DStream}
 */
DStream.prototype.countByWindow = function(windowDuration, slideDuration) {
    return new DStream(
        this.getJavaObject().countByWindow(
            windowDuration.getJavaObject(),
            slideDuration.getJavaObject()
        ), this.streamingContext)
};

/**
 * Return a new DStream in which each RDD contains the count of distinct
 * elements in RDDs in a sliding window over this DStream. Hash partitioning is
 * used to generate the RDDs with Spark's default number of partitions if
 * numPartitions is not specified.
 * @param {Duration} windowDuration
 * @param {Duration} slideDuration
 * @param {int} numPartitions
 * @returns {DStream}
 */
DStream.prototype.countByValueAndWindow = function() {
    if(arguments.length == 2) {
        return new DStream(
            this.getJavaObject().countByValueAndWindow(
                arguments[0].getJavaObject(),
                arguments[1].getJavaObject()
            ), this.streamingContext
        )
    } else {
        return new DStream(
            this.getJavaObject().countByValueAndWindow(
                arguments[0].getJavaObject(),
                arguments[1].getJavaObject(),
                arguments[2]
            ), this.streamingContext
        )
    }
};

/**
 * Return a new DStream in which each RDD is generated by applying glom() to
 * each RDD of this DStream. Applying glom() to an RDD coalesces all elements
 * within each partition into an array.
 */
DStream.prototype.glom = function() {
    return new DStream(this.getJavaObject().glom(), this.streamingContext);
}

/**
 * Return the StreamingContext associated with this DStream
 */
DStream.prototype.context = function() {
    return this.streamingContext;
}

/**
 * Return a new DStream by applying a function to all elements of this DStream.
 * @param func
 * @returns {DStream}
 */
DStream.prototype.map = function(func) {
    var sv = Utils.createJavaParams(func);
    var fn = new org.eclairjs.nashorn.JSFunction(sv.funcStr, sv.scopeVars);
    return new DStream(this.getJavaObject().map(fn), this.streamingContext);
};

/**
 * Return a new DStream by applying a function to all elements of this DStream.
 * @param func
 * @returns {DStream}
 */
DStream.prototype.mapToPair = function(func) {
    var sv = Utils.createJavaParams(func);
    var fn = new org.eclairjs.nashorn.JSPairFunction(sv.funcStr, sv.scopeVars);
    return new DStream(this.getJavaObject().mapToPair(fn), this.streamingContext);
};

/**
 * Return a new DStream by first applying a function to all elements of this DStream, and then flattening the results.
 * @param func
 * @returns {DStream}
 */
DStream.prototype.flatMap = function(func) {
    var sv = Utils.createJavaParams(func);
    var fn = new org.eclairjs.nashorn.JSFlatMapFunction(sv.funcStr, sv.scopeVars);
    return new DStream(this.getJavaObject().flatMap(fn), this.streamingContext);
};

/**
 * Return a new DStream by applying a function to all elements of this DStream,
 * and then flattening the results
 * @param func
 * @returns {DStream}
 */
DStream.prototype.flatMapToPair = function(func) {
    var sv = Utils.createJavaParams(func);
    var fn = new org.eclairjs.nashorn.JSPairFunction(sv.funcStr, sv.scopeVars);
    return new DStream(this.getJavaObject().flatMapToPair(fn),
                       this.streamingContext);
};

/**
 * Return a new DStream in which each RDD is generated by applying
 * mapPartitions() to each RDDs of this DStream. Applying mapPartitions() to an
 * RDD applies a function to each partition of the RDD.
 * @param func
 * @returns {DStream}
 */
DStream.prototype.mapPartitions = function(func) {
    var sv = Utils.createJavaParams(func);
    var fn = new org.eclairjs.nashorn.JSFlatMapFunction(sv.funcStr, sv.scopeVars);
    return new DStream(this.getJavaObject().mapPartitions(fn),
                       this.streamingContext);
};


/**
 * Return a new DStream in which each RDD contains all the elements in seen in a sliding window of time over this DStream. 
 * The new DStream generates RDDs with the same interval as this DStream.
 * @param duration - width of the window; must be a multiple of this DStream's interval.
 * @returns {DStream}
 */
DStream.prototype.window = function(duration) {
    return new DStream(this.getJavaObject().window(Utils.unwrapObject(duration)),
                       this.streamingContext);
};

/**
 * Apply a function to each RDD in this DStream. This is an output operator, so 'this' DStream will be registered as an output 
 * stream and therefore materialized.
 * @param func
 * @returns {void}
 */
DStream.prototype.foreachRDD = function(func) {
    var sv = Utils.createJavaParams(func);
    var fn = new org.eclairjs.nashorn.JSFunction(sv.funcStr, sv.scopeVars);
    this.getJavaObject().foreachRDD(fn);
}

/**
 * Print the first ten elements of each RDD generated in this DStream. This is an output operator, so this DStream will be 
 * registered as an output stream and there materialized.
 * @returns {void}
 */
DStream.prototype.print = function() {
    this.getJavaObject().print();
};
